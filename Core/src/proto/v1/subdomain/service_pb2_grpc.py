# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from proto.v1.subdomain import service_pb2 as v1_dot_subdomain_dot_service__pb2


class SubdomainServiceStub(object):
    """Missing associated documentation comment in .proto file."""
    
    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetOccupiedSubdomains = channel.unary_unary(
            '/subdomain_service.SubdomainService/GetOccupiedSubdomains',
            request_serializer=v1_dot_subdomain_dot_service__pb2.GetOccupiedSubdomainsRequest.SerializeToString,
            response_deserializer=v1_dot_subdomain_dot_service__pb2.GetOccupiedSubdomainsResponse.FromString,
        )


class SubdomainServiceServicer(object):
    """Missing associated documentation comment in .proto file."""
    
    def GetOccupiedSubdomains(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SubdomainServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'GetOccupiedSubdomains': grpc.unary_unary_rpc_method_handler(
            servicer.GetOccupiedSubdomains,
            request_deserializer=v1_dot_subdomain_dot_service__pb2.GetOccupiedSubdomainsRequest.FromString,
            response_serializer=v1_dot_subdomain_dot_service__pb2.GetOccupiedSubdomainsResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'subdomain_service.SubdomainService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class SubdomainService(object):
    """Missing associated documentation comment in .proto file."""
    
    @staticmethod
    def GetOccupiedSubdomains(request,
                              target,
                              options=(),
                              channel_credentials=None,
                              call_credentials=None,
                              insecure=False,
                              compression=None,
                              wait_for_ready=None,
                              timeout=None,
                              metadata=None):
        return grpc.experimental.unary_unary(request, target,
                                             '/subdomain_service.SubdomainService/GetOccupiedSubdomains',
                                             v1_dot_subdomain_dot_service__pb2.GetOccupiedSubdomainsRequest.SerializeToString,
                                             v1_dot_subdomain_dot_service__pb2.GetOccupiedSubdomainsResponse.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
