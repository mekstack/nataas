# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from proto import objects_pb2 as proto_dot_objects__pb2


class DomainServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetDomainsPool = channel.unary_unary(
                '/objects.DomainService/GetDomainsPool',
                request_serializer=proto_dot_objects__pb2.GetDomainsPoolRequest.SerializeToString,
                response_deserializer=proto_dot_objects__pb2.GetDomainsPoolResponse.FromString,
                )


class DomainServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetDomainsPool(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DomainServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetDomainsPool': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDomainsPool,
                    request_deserializer=proto_dot_objects__pb2.GetDomainsPoolRequest.FromString,
                    response_serializer=proto_dot_objects__pb2.GetDomainsPoolResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'objects.DomainService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DomainService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetDomainsPool(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/objects.DomainService/GetDomainsPool',
            proto_dot_objects__pb2.GetDomainsPoolRequest.SerializeToString,
            proto_dot_objects__pb2.GetDomainsPoolResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class SubdomainServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetOccupiedSubdomains = channel.unary_unary(
                '/objects.SubdomainService/GetOccupiedSubdomains',
                request_serializer=proto_dot_objects__pb2.GetOccupiedSubdomainsRequest.SerializeToString,
                response_deserializer=proto_dot_objects__pb2.GetOccupiedSubdomainsResponse.FromString,
                )


class SubdomainServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetOccupiedSubdomains(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SubdomainServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetOccupiedSubdomains': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOccupiedSubdomains,
                    request_deserializer=proto_dot_objects__pb2.GetOccupiedSubdomainsRequest.FromString,
                    response_serializer=proto_dot_objects__pb2.GetOccupiedSubdomainsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'objects.SubdomainService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SubdomainService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetOccupiedSubdomains(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/objects.SubdomainService/GetOccupiedSubdomains',
            proto_dot_objects__pb2.GetOccupiedSubdomainsRequest.SerializeToString,
            proto_dot_objects__pb2.GetOccupiedSubdomainsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ProjectServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetProjectInfo = channel.unary_unary(
                '/objects.ProjectService/GetProjectInfo',
                request_serializer=proto_dot_objects__pb2.GetProjectInfoRequest.SerializeToString,
                response_deserializer=proto_dot_objects__pb2.GetProjectInfoResponse.FromString,
                )
        self.AddProjectInfo = channel.unary_unary(
                '/objects.ProjectService/AddProjectInfo',
                request_serializer=proto_dot_objects__pb2.AddProjectInfoRequest.SerializeToString,
                response_deserializer=proto_dot_objects__pb2.AddProjectInfoResponse.FromString,
                )


class ProjectServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetProjectInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddProjectInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ProjectServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetProjectInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetProjectInfo,
                    request_deserializer=proto_dot_objects__pb2.GetProjectInfoRequest.FromString,
                    response_serializer=proto_dot_objects__pb2.GetProjectInfoResponse.SerializeToString,
            ),
            'AddProjectInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.AddProjectInfo,
                    request_deserializer=proto_dot_objects__pb2.AddProjectInfoRequest.FromString,
                    response_serializer=proto_dot_objects__pb2.AddProjectInfoResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'objects.ProjectService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ProjectService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetProjectInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/objects.ProjectService/GetProjectInfo',
            proto_dot_objects__pb2.GetProjectInfoRequest.SerializeToString,
            proto_dot_objects__pb2.GetProjectInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddProjectInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/objects.ProjectService/AddProjectInfo',
            proto_dot_objects__pb2.AddProjectInfoRequest.SerializeToString,
            proto_dot_objects__pb2.AddProjectInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
